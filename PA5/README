README file for Programming Assignment 5  (Java edition)
=======================================================

Your directory should now contain the following files:

 ASTConstants.java    -> [course dir]/src/PA5J/ASTConstants.java
 ASTLexer.java	      -> [course dir]/src/PA5J/ASTLexer.java
 ASTParser.java	      -> [course dir]/src/PA5J/ASTParser.java
 AbstractSymbol.java  -> [course dir]/src/PA5J/AbstractSymbol.java
 AbstractTable.java   -> [course dir]/src/PA5J/AbstractTable.java
 BoolConst.java
 Cgen.java	      -> [course dir]/src/PA5J/Cgen.java
 CgenClassTable.java
 CgenNode.java
 CgenSupport.java
 ClassTable.java      -> [course dir]/src/PA5J/ClassTable.java
 Flags.java	      -> [course dir]/src/PA5J/Flags.java
 IdSymbol.java	      -> [course dir]/src/PA5J/IdSymbol.java
 IdTable.java	      -> [course dir]/src/PA5J/IdTable.java
 IntSymbol.java
 IntTable.java	      -> [course dir]/src/PA5J/IntTable.java
 ListNode.java	      -> [course dir]/src/PA5J/ListNode.java
 build.xml	      -> [course dir]/assignments/PA5/build.xml
 README
 StringSymbol.java
 StringTable.java     -> [course dir]/src/PA5J/StringTable.java
 SymbolTable.java     -> [course dir]/src/PA5J/SymbolTable.java
 SymtabExample.java   -> [course dir]/src/PA5J/SymtabExample.java
 TokenConstants.java  -> [course dir]/src/PA5J/TokenConstants.java
 TreeConstants.java
 TreeNode.java        -> [course dir]/src/PA5J/TreeNode.java
 Utilities.java	      -> [course dir]/src/PA5J/Utilities.java
 cool-tree.java
 example.cl
 tests
 mycoolc              -> [course dir]/bin/mycoolc

	The build.xml contains targets for compiling and running your
	program, as well as handing it in. DO NOT MODIFY.

	The README contains this info. Part of the assignment is to
	fill the README with the write-up for your project. You should
	explain design decisions, explain why your code is correct,
	and why your test cases are adequate. It is part of the
	assignment to clearly and concisely explain things in text as
	well as to comment your code.  Also, please provide feedback
	on Coolaid by answering the questions below.

	In example.cl, you should write a correct Cool program which
	tests as many aspects of the code generator as possible. It
	should pass your code generator, and running spim on the
	generated output should run the program correctly.

	CgenClassTable.java and CgenNode.java are the skeleton files for
	the code generator. These skeletons are much larger than the
	ones for previous assignments.  The skeletons provides three
	components of the code generator:

		- functions to build the inheritance graph; (we supply
		  this in case you didn't get this working for PA4)

		- functions to emit global data and constants;
		 
	You should work to understand this code, and it will help you
        write the rest of the code generator.

        tests is a directory containing six test cases. Your checkpoint
        submission will be graded by this test cases.

        TreeNode.java and ListNode.java contain definitions used by
        the tree package. DO NOT MODIFY.

        cool-tree.java specifies and give an implementation of Cool
        ASTs (see the README for PA3 and the "Cool Tour").  In this
        assignment, you will need to complete the code generating
        methods for all Cool expression nodes.

	BoolConst.java, IntSymbol.java, and StringSymbol.java are used
        to manage constants in Cool programs.  You will need to
        complete the method for generating constant definitions in
        each of these classes.

	CgenSupport.java is general support code for the code
	generator.  You can add functions and constants as you see
	fit, but do not modify anything that's already there.  This
	class also serves as a placeholder for a bunch of constants as
	well as functions to emit spim instructions (we supply these
	to save you some tedious coding).

	TreeConstants.java defined some useful symbol constants.  You
	may add some of your own, if you wish.

	ASTLexer.java, ASTParser.java, and ASTConstants.java implement
	a lexer and a parser for reading text representation of ASTs
	from console in the format produced by the parser phase. DO
	NOT MODIFY.

	Cgen.java supplies the driver for the compiler. You should not
        modify this code.  The script mycoolc can pass any of the
        standard flags to the code generator; for this assignment, -c
        (code generator debug) may be useful as it sets a global
        variable cgen_debug to true (1).  If you want your code
        generator to print debug information when the option is set,
        write your debug code in the following format:

	      if (cgen_debug)
	      {
		...
	      }

	SymbolTable.java contains a symbol table implementation. Read
	the comments in the file and look at the example in
	SymtabExample.java.  You are not required to use this code,
	but you may find it useful. DO NOT MODIFY.

Instructions
------------

	To compile your compiler and code generator type:

	% ant cgen

	To test your compiler, type:

	% ./mycoolc [-o output filename] <file1.cl> <file2.cl> ...

	This command parses all the cool files given on the command
	line, passes them through the semantic checker, and then hands
	the program AST to your code generator.  It will also
        include in your generated code annotations that are needed
        by Coolaid.

	To run your compiler on the file example.cl, type:

	% ant test

        To run Coolaid on your output, type:

        % coolaid file1.s

	To run the produced code:

	% spim -file file1.s  /* or the output filename you chose */

	To turn in your work at checkpoint, type:
        
        % ant submit-clean
        % submit PA5-checkpoint

        To turn in your work finally, type:

        % ant submit-clean
        % submit PA5
        
        Be sure to submit all relevant source files.  
        In particular, you probably want to turn in cool-tree.java, 
        TreeConstants.java, BoolConst.java, IntSymbol.java, StringSymbol.java,
        CgenNode.java, CgenClassTable.java, CgenSupport.java, example.cl, README.
	
	You may turn in the assignment as many times as you like.
	However, only the last version will be retained for grading.
	
	GOOD LUCK!

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

Write-up for PA5
----------------
Majority of code resides in cool-tree.java and CgenClassTable.java. There are detailed comments which explain the logic of code and the use of instance fields in these two files. I extend CgenNode with some new fields to hold methods and attributes. There are also some ancillary functions in CgenNode. Please see CgenNode.java for detailed comments :) 

cool-tree holds the logic of how to emit code for each kind of expression and class method. The program entry point is programc.cgen(). In cgen(), we first create a CgenClassTable. In the constructor of CgenClassTable, we build up inheritance tree, set class tag of each CgenNode and set fields in each CgenNode to hold the methods and attributes. We also emit code for global data, garbage collector option, constants, class name table, class object table, dispatch tables, prototype objects and class intializer functions in the constructor of CgenClassTable. Then we goes into each class and emit code for each locally-defined method(including those methods inherited from parents but overriden locally).

The logic for emitting code of most expressions is easy and could be understood with comments in cool-tree. The one worth mentioning is case. In Cool, after evaluating the case variable, if the variable is non-void, the branch which the branch variable is the closest ancestor of the case variable is taken. If there is no qualified branch, then _case_abort is taken. So the code for different branches should be ordered in a way that branch variables of children type of other branch variables appear earlier. In order to achieve this result, the class tags should be assigned in a way that CgenNode of child type of some other CgenNode gets a bigger class tag number. Then we could sort all branches in descending order of branch variable class tags. CgenClassTable.setClassTags does a depth first search from Object class and assign class tags in the way discussed above. 

Another trick about case expression is that we calculate all possible run-time types of case variable and try to match the possible run-time types with all possible subtypes of each branch variable. We only retain the subtypes which may be the possible run-time types of case variable. At run-time, we only compare class tag of case variable with the subtypes we've retained. If no such subtype is retained, we don't bother to emit code for this branch. 

There are two helper classes I made. One is MethodNodePair and the other is StackLocation. StackLocation holds the location where we could find the reference to a variable. The baseRegister is either SELF(for attributes) or fp(for method arguments and temporary variables). For attributes, the offset is calculated by the order they appear textually. Inherited methods come before locally-defined attributes. For method arguments and temporary variables, we use CgenClassTable.spFromfp to record the next available stack location. Since fp always points to ra on method entrance, the initial spFromfp is always 1. Then if a new variable reference is pushed to stack, we will increase spFromfp; vice versa. The invariant is that after evaluating each expression, the stack remains unchanged. The result of evaluation is always in a0(accumulator). 

MethodNodePair stores in which class a method is textually defined. For inherited but not locally-overriden methods, the node in MethodNodePair will still refer to the parent. In CgenClassTable.installAllClassFeaturesHelper, after we get all locally-defined methods in newMethods, we need to go through all inherited methods to see if we need to replace it with any locally-overriden method. Therefore the equals method defined in MethodNodePair is only based on method name because we're only going to replace inherited methods from parent.  

Tests are included in example.cl. The comments in test.cl will tell what each test case is testing for.
We have tested all valid cool expressions, different scenarios of equality_test, three kinds of abort scenarios and the built-in functions(e.g IO.out_string, String.length, etc). 




Coolaid Feedback (optional)
----------------------------
1. Rate Coolaid's usefulness on a scale from 0 to 6 where 0
   means that it was counter-productive, 3 means that it neither
   helped nor hindered you, and 6 means that you can't imagine
   developing/debugging a code generator without it.

3

2. What aspects of Coolaid particularly helped you?


Coolaid could catch type error arising at a specific line number, so it helps narrow down the range of possible errors.


3. What aspects of Coolaid would you like to see improved?


The error message is still somewhat confusing, especially if the error is that one of the registers contains wrong type.



4. Describe bugs, if any, that Coolaid helped you find or fix?

No... Running spim and use cgen_debug flag to print out debugging messages help me most. 



5. Do you have any additional comments you would like to share
   with us?

I feel last project is harder than this one? This project is conceptually easier and the code amount is actually less.
The only difficult part is to handle case expression. 





